<exportedData version="39" buildLabel="build_3.5_30434_OPT_2010.01.13_07:32:22" buildVersion="3.5.1.30434">
  <exportPath>/projects/PluginLite-1.0</exportPath>
  <project>
    <projectName>PluginLite-1.0</projectName>
    <propertySheet>
      <property>
        <propertyName>ec_setup</propertyName>
        <expandable>0</expandable>
        <value>use Cwd;
use File::Spec;

my $dir = getcwd;
my $logfile ="";
my $pluginDir;
if(defined $ENV{'QUERY_STRING'}) { # Promotion through UI
	$logfile = "$ENV{COMMANDER_PLUGINS}/$pluginName/ec_setup.log";
	$pluginDir = "$ENV{ COMMANDER_PLUGINS}/$pluginName"
	#$logfile = "../../$pluginName/ec_setup.log";
	#$pluginDir = File::Spec-&gt;rel2abs( "../../$pluginName" );
} else {
	$logfile = "$ENV{'TEMP'}/ec_setup.log";
	$pluginDir = $dir;
}
$commander-&gt;setProperty("/plugins/$pluginName/project/pluginDir",{value=&gt;$pluginDir});
open(my $fh, '&gt;', $logfile) or die "Could not open file '$logfile' $!";
print $fh "Plugin Name: $pluginName\n";
print $fh "Current directory: $dir\n";

# Evaluate promote.groovy or demote.groovy based on whether plugin is being promoted or demoted ($promoteAction)
local $/ = undef;
# If env variable QUERY_STRING exists:
if(defined $ENV{'QUERY_STRING'}) { # Promotion through UI
	open FILE, "../../$pluginName/dsl/$promoteAction.groovy" or die "Couldn't open file: $!";
} else {  # Promotion from the command line
	open FILE, "dsl/$promoteAction.groovy" or die "Couldn't open file: $!";
}
my $dsl = &lt;FILE&gt;;
close FILE;
my $dslReponse = $commander-&gt;evalDsl($dsl,
		{parameters=&gt;qq(
			{
				"pluginName":"$pluginName"
			}
		)}
)-&gt;findnodes_as_string("/");
print $fh $dslReponse;

close $fh;

# Create log file output property
open LOGFILE, $logfile or die "Couldn't open file: $!";
my $logFileContent = &lt;LOGFILE&gt;;
my $propertyResponse = $commander-&gt;setProperty("/plugins/$pluginName/project/ec_setup.log",
			{value=&gt;$logFileContent}
	);
close LOGFILE;</value>
      </property>
    </propertySheet>
  </project>
</exportedData>